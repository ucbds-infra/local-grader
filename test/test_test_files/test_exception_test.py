"""Tests for ``otter.test_files.exception_test``"""

import pprint
import pytest

from dataclasses import asdict
from textwrap import dedent

from otter.test_files.abstract_test import TestCase, TestCaseResult
from otter.test_files.exception_test import ExceptionTestFile, test_case


@pytest.fixture
def exception_test_contents():
    return dedent(
        """\
        from otter.test_files import test_case

        OK_FORMAT = False

        name = "q1"

        @test_case(hidden=False, points=1)
        def q1_1(x):
            assert x % 2 == 0

        @test_case(hidden=True, points=2)
        def q1_2(x):
            assert x == 4
        """
    )


@pytest.fixture
def exception_test_contents_with_messages():
    return dedent(
        """\
        from otter.test_files import test_case

        OK_FORMAT = False

        name = "q1"

        @test_case(hidden=False, points=1, success_message="foo")
        def q1_1(x):
            assert x % 2 == 0

        @test_case(hidden=True, points=2, failure_message="bar")
        def q1_2(x):
            assert x == 4
        """
    )


def q1_1(x):
    assert x % 2 == 0


def q1_2(x):
    assert x == 4


@pytest.fixture
def expected_test_cases():
    return [
        TestCase(
            name="q1 - 1",
            body=test_case(name="q1 - 1", hidden=False, points=1)(q1_1),
            hidden=False,
            points=1,
            success_message=None,
            failure_message=None,
        ),
        TestCase(
            name="q1 - 2",
            body=test_case(name="q1 - 1", hidden=True, points=2)(q1_2),
            hidden=True,
            points=2,
            success_message=None,
            failure_message=None,
        ),
    ]


@pytest.fixture
def expected_test_cases_with_messages():
    return [
        TestCase(
            name="q1 - 1",
            body=test_case(name="q1 - 1", hidden=False, points=1)(q1_1),
            hidden=False,
            points=1,
            success_message="foo",
            failure_message=None,
        ),
        TestCase(
            name="q1 - 2",
            body=test_case(name="q1 - 1", hidden=True, points=2)(q1_2),
            hidden=True,
            points=2,
            success_message=None,
            failure_message="bar",
        ),
    ]


# this hack is necessary because for some reason the __eq__ generated by the dataclass decorator
# does not use the __eq__ defined on fields (i.e. comparing the body field of two TestCases always
# fails even though test_case has an __eq__ method)
def compare_dataclasses_as_dicts(l1, l2):
    assert [asdict(i1) == asdict(i2) for i1, i2 in zip(l1, l2)]


def test_from_file(
    exception_test_contents,
    exception_test_contents_with_messages,
    expected_test_cases,
    expected_test_cases_with_messages,
    tmp_path,
):
    """Tests ``ExceptionTestFile.from_file``."""
    fp = tmp_path / "foo.py"
    fp.write_text(exception_test_contents)

    tf = ExceptionTestFile.from_file(str(fp))
    assert tf.name == "q1"
    assert tf.path == str(fp)
    assert tf.all_or_nothing == False
    compare_dataclasses_as_dicts(tf.test_cases, expected_test_cases)

    fp.write_text(exception_test_contents_with_messages)

    tf = ExceptionTestFile.from_file(str(fp))
    assert tf.name == "q1"
    assert tf.path == str(fp)
    assert tf.all_or_nothing == False
    compare_dataclasses_as_dicts(tf.test_cases, expected_test_cases_with_messages)


def test_from_metadata(
    exception_test_contents,
    exception_test_contents_with_messages,
    expected_test_cases,
    expected_test_cases_with_messages,
):
    """Tests ``ExceptionTestFile.from_metadata``."""
    tf = ExceptionTestFile.from_metadata(exception_test_contents, "foo.ipynb")
    assert tf.name == "q1"
    assert tf.path == "foo.ipynb"
    assert tf.all_or_nothing == False
    compare_dataclasses_as_dicts(tf.test_cases, expected_test_cases)

    tf = ExceptionTestFile.from_metadata(exception_test_contents_with_messages, "foo.ipynb")
    assert tf.name == "q1"
    assert tf.path == "foo.ipynb"
    assert tf.all_or_nothing == False
    compare_dataclasses_as_dicts(tf.test_cases, expected_test_cases_with_messages)


def test_from_metadata_errors():
    """Tests errors in ``ExceptionTestFile.from_metadata``."""
    with pytest.raises(ValueError, match="Test file foo.ipynb does not define 'name'"):
        ExceptionTestFile.from_metadata(
            "from otter.test_files import test_case\n@test_case(hidden=False, points=1)\ndef q1_1(x):\n    assert x % 2 == 0",
            "foo.ipynb",
        )


def test_run(exception_test_contents, expected_test_cases):
    """Tests ``ExceptionTestFile.run``."""
    tf = ExceptionTestFile.from_metadata(exception_test_contents, "foo.ipynb")

    tf.run({"x": 4})
    compare_dataclasses_as_dicts(
        tf.test_case_results,
        [
            TestCaseResult(expected_test_cases[0], "✅ Test case passed", True),
            TestCaseResult(expected_test_cases[1], "✅ Test case passed", True),
        ],
    )

    tf.run({"x": 6})
    assert len(tf.test_case_results) == 2
    compare_dataclasses_as_dicts(
        [tf.test_case_results[0]],
        [TestCaseResult(expected_test_cases[0], "✅ Test case passed", True)],
    )
    compare_dataclasses_as_dicts([tf.test_case_results[1].test_case], [expected_test_cases[1]])
    assert tf.test_case_results[1].passed == False
    assert tf.test_case_results[1].message.startswith("❌ Test case failed\n")
    assert "assert x == 4" in tf.test_case_results[1].message
    assert "AssertionError" in tf.test_case_results[1].message


def test_all_or_nothing(exception_test_contents, tmp_path):
    """Tests the ``all_or_nothing`` config."""
    exception_test_contents += "\nall_or_nothing = True"

    test_file = tmp_path / "q1.py"
    test_file.write_text(exception_test_contents)

    # test passes
    tf = ExceptionTestFile.from_file(str(test_file))
    assert tf.all_or_nothing

    tf.run({"x": 4})
    assert tf.grade == 1
    assert tf.score == 3
    assert tf.possible == 3

    # test fails
    tf = ExceptionTestFile.from_file(str(test_file))
    assert tf.all_or_nothing

    tf.run({"x": 5})
    assert tf.grade == 0
    assert tf.score == 0
    assert tf.possible == 3

    # public passes, hidden fails
    tf = ExceptionTestFile.from_file(str(test_file))
    assert tf.all_or_nothing

    tf.run({"x": 2})
    assert tf.grade == 0
    assert tf.score == 0
    assert tf.possible == 3
